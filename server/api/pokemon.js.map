{"version":3,"sources":["../../src/api/pokemon.js"],"names":["P","Pokedex","Search","require","Pokemon","EvolutionChain","config","api","toTitleCase","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","replaceSpaces","string","getSprites","spritesArray","sprites","front_default","push","url","back_default","front_shiny","back_shiny","removeLinebreaks","capitalizeFirstLetter","slice","getTypes","typesArray","types","forEach","type","name","setQuery","query","attributes","get","req","res","params","id","findOne","where","pokedexNumber","pokemon","status","json","checkProperties","tempObj","key","obj","getEvolutions","evolutions","searchForEvolution","chain","evolves_to","evolution","species","evolvesTo","data","trigger","evolution_details","value","text","evolutionChain","userId","chainId","map","result","i","namePokemon","evolvesToPokemon","nameSprite","sprite","evolvesToSprite","promises","Promise","all","promisesAll","create","error","offset","parseInt","param","order","currentStat","stat","sort","findAll","limit","pokemonRanked","element","console","log","dataValues","rank","subtitle","responseObj","levenshteinArray","allPokemon","length","indexOf","Math","min","searchedFor","count","update","updated","psqlQuery","sequelize","QueryTypes","SELECT","results","pokemonData","message","sortResponse","sortBy","idRange","$between","quantity","literal","randomPokemon","type1","type2","chart"],"mappings":"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","file":"pokemon.js","sourcesContent":["import { Router } from 'express';\nimport Pokedex from 'pokedex-promise-v2';\nimport { sequelize } from '../models';\nimport generateEvolutionText from '../utils/generateEvolutionText';\nconst P = new Pokedex();\nimport { defensiveTypeChart } from '../utils/typeCharts';\nimport allPokemon from '../utils/allPokemon';\nimport levenshtein from '../utils/levenshtein';\n\nconst Search = require('../models').Search;\nconst Pokemon = require('../models').Pokemon;\nconst EvolutionChain = require('../models').EvolutionChain;\n\nexport default ({ config }) => {\n  let api = Router();\n\n  function toTitleCase(str) {\n    return str.replace(/\\w\\S*/g, function(txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n  }\n\n  const replaceSpaces = string => {\n    return string.replace(/ /g, '-');\n  };\n\n  const getSprites = sprites => {\n    const spritesArray = [];\n    if (sprites.front_default) {\n      spritesArray.push({ url: sprites.front_default });\n    }\n    if (sprites.back_default) {\n      spritesArray.push({ url: sprites.back_default });\n    }\n    if (sprites.front_shiny) {\n      spritesArray.push({ url: sprites.front_shiny });\n    }\n    if (sprites.back_shiny) {\n      spritesArray.push({ url: sprites.back_shiny });\n    }\n    return spritesArray;\n  };\n\n  const removeLinebreaks = string => {\n    return string.replace(/\\n/g, ' ');\n  };\n\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n\n  const getTypes = types => {\n    const typesArray = [];\n    types.forEach(type => {\n      typesArray.push(type.type.name);\n    });\n    return typesArray;\n  };\n\n  const setQuery = name => {\n    let query = '';\n    if (name === 'meowstic') {\n      query = 'meowstic-male';\n    } else {\n      query = replaceSpaces(name);\n    }\n    return query;\n  };\n\n  const attributes = [\n    'id',\n    'name',\n    'species',\n    'pokedexNumber',\n    'ability1',\n    'ability1Description',\n    'ability2',\n    'ability2Description',\n    'ability3',\n    'ability3Description',\n    'sprite',\n    'sprites',\n    'type1',\n    'type2',\n    'pokedexEntry',\n    'height',\n    'weight',\n    'statHp',\n    'statAttack',\n    'statDefense',\n    'statSpecialAttack',\n    'statSpecialDefense',\n    'statSpeed',\n    'statTotal',\n    'count',\n  ];\n\n  api.get('/raw/:id', async (req, res) => {\n    try {\n      const query = setQuery(req.params.id);\n      const pokemon = await Pokemon.findOne({\n        where: { pokedexNumber: req.params.id },\n      });\n      res.status(200).json(pokemon);\n    } catch (error) {\n      throw error;\n      res.status(404).json({ message: error.message });\n    }\n  });\n\n  const checkProperties = obj => {\n    const tempObj = {};\n    for (var key in obj) {\n      if (obj[key] !== null && obj[key] != '') {\n        if (obj[key].name) {\n          tempObj[key] = obj[key].name;\n        } else {\n          tempObj[key] = obj[key];\n        }\n      }\n    }\n    return tempObj;\n  };\n\n  const getEvolutions = evolutionChain => {\n    let evolutions = [];\n    const searchForEvolution = chain => {\n      if (chain.evolves_to) {\n        chain.evolves_to.forEach(data => {\n          const evolution = {\n            name: chain.species.name,\n            evolvesTo: data.species.name,\n            trigger: data.evolution_details[0].trigger.name,\n          };\n          delete data.evolution_details[0].trigger;\n          evolution.value = checkProperties(data.evolution_details[0]);\n          evolution.text = generateEvolutionText(evolution);\n          delete evolution.value;\n          evolutions.push(evolution);\n          if (data.evolves_to) {\n            searchForEvolution(data);\n          }\n        });\n      }\n    };\n    searchForEvolution(evolutionChain.chain);\n    return evolutions;\n  };\n\n  api.get('/evolutions/:name', async (req, res) => {\n    try {\n      const userId = req.query.userId;\n      const pokemon = await Pokemon.findOne({\n        where: { name: req.params.name },\n        attributes: [...attributes, 'chainId', 'jsonPokemon'],\n      });\n      if (pokemon) {\n        const evolutionChain = await EvolutionChain.findOne({\n          where: { chainId: pokemon.chainId },\n        });\n        const evolutions = getEvolutions(evolutionChain.json);\n        // delete pokemon.chainId;\n\n        const promises = await evolutions.map(async (result, i) => {\n          const namePokemon = await Pokemon.findOne({\n            where: { name: result.name },\n            attributes: ['sprite'],\n          });\n          const evolvesToPokemon = await Pokemon.findOne({\n            where: { name: result.evolvesTo },\n            attributes: ['sprite'],\n          });\n          result.nameSprite = namePokemon.sprite;\n          result.evolvesToSprite = evolvesToPokemon.sprite;\n          return result;\n        });\n        const promisesAll = await Promise.all(promises);\n\n        res.status(200).json(promisesAll);\n        Search.create({ userId, name: req.params.name });\n      } else {\n        res.status(200).json({ error: 'no pokemon named ' + req.params.name });\n      }\n    } catch (error) {\n      throw error;\n      res.status(404).json({ message: error.message });\n    }\n  });\n\n  api.get('/stats/:stat', async (req, res) => {\n    let offset = req.query.offset;\n    if (offset) {\n      offset = parseInt(offset);\n    }\n    if (typeof offset !== 'number') {\n      offset = 0;\n    }\n    let param = '';\n    let order = [];\n    let currentStat = '';\n    if (req.params.stat) {\n      param = req.params.stat.toLowerCase();\n    }\n    switch (param) {\n      case 'total':\n        order.push('statTotal');\n        currentStat = 'statTotal';\n        break;\n      case 'hp':\n        order.push('statHp');\n        currentStat = 'statHp';\n        break;\n      case 'attack':\n        order.push('statAttack');\n        currentStat = 'statAttack';\n        break;\n      case 'defense':\n        order.push('statDefense');\n        currentStat = 'statDefense';\n        break;\n      case 'specialattack':\n        order.push('statSpecialAttack');\n        currentStat = 'statSpecialAttack';\n        break;\n      case 'specialdefense':\n        order.push('statSpecialDefense');\n        currentStat = 'statSpecialDefense';\n        break;\n      case 'speed':\n        order.push('statSpeed');\n        currentStat = 'statSpeed';\n        break;\n      default:\n        stat = null;\n    }\n    if (req.query) {\n      if (req.query.sort) {\n        if (req.query.sort === 'highest') {\n          order.push('DESC');\n        }\n      }\n    }\n\n    try {\n      const pokemon = await Pokemon.findAll({\n        order: [order],\n        limit: 10,\n        offset: offset,\n        attributes: attributes,\n      });\n      const pokemonRanked = pokemon.map((element, i) => {\n        console.log(element.dataValues);\n        element.dataValues.rank = i + 1 + offset;\n        if (req.params.stat === 'specialdefense') {\n          element.dataValues.subtitle =\n            'Special Defense: ' + element.dataValues[currentStat];\n        } else if (req.params.stat === 'specialattack') {\n          element.dataValues.subtitle =\n            'Special Attack: ' + element.dataValues[currentStat];\n        } else {\n          element.dataValues.subtitle =\n            capitalizeFirstLetter(req.params.stat) +\n            ': ' +\n            element.dataValues[currentStat];\n        }\n\n        return element.dataValues;\n      });\n      const responseObj = { pokemon: pokemonRanked, offset: offset };\n\n      res.status(200).json(pokemonRanked);\n    } catch (error) {\n      throw error;\n      res.status(404).json({ message: error.message });\n    }\n  });\n\n  api.get('/one/:name', async (req, res) => {\n    let name = req.params.name;\n    const levenshteinArray = [];\n\n    for (var i = 0; i < allPokemon.length; i++) {\n      if (levenshtein(allPokemon[i], name) === 0) {\n        levenshteinArray.push(0);\n        console.log('break');\n        break;\n      }\n      levenshteinArray.push(levenshtein(allPokemon[i], name));\n    }\n\n    name = allPokemon[levenshteinArray.indexOf(Math.min(...levenshteinArray))];\n    try {\n      const userId = req.query.userId;\n      const pokemon = await Pokemon.findOne({\n        where: { name: name },\n        attributes: attributes,\n      });\n      if (pokemon) {\n        pokemon.dataValues.searchedFor = toTitleCase(\n          req.params.name.replace(/-/g, ' '),\n        );\n        res.status(200).json(pokemon.dataValues);\n        console.log(pokemon.dataValues);\n        let count = pokemon.dataValues.count;\n        if (pokemon.dataValues.name !== 'mimikyu') {\n          let updated = await pokemon.update({ count: count + 1 });\n        } else {\n          let updated = await pokemon.update({ count: -1 });\n        }\n      } else {\n        res.status(200).json({ error: 'no pokemon named ' + req.params.name });\n      }\n    } catch (error) {\n      throw error;\n      res.status(404).json({ message: error.message });\n    }\n  });\n\n  api.get('/id/:id', async (req, res) => {\n    try {\n      const query = setQuery(req.params.id);\n      const userId = req.query.userId;\n      const pokemon = await Pokemon.findOne({\n        where: { pokedexNumber: req.params.id },\n        attributes: attributes,\n      });\n      if (pokemon) {\n        res.status(200).json(pokemon);\n        Search.create({ userId, name: pokemon.name });\n      } else {\n        res.status(200).json({ error: 'no pokemon with id: ' + req.params.id });\n      }\n    } catch (error) {\n      throw error;\n      res.status(404).json({ message: error.message });\n    }\n  });\n\n  api.get('/popular', async (req, res) => {\n    let offset = req.query.offset;\n    if (offset) {\n      offset = parseInt(offset);\n    }\n    try {\n      let psqlQuery =\n        'SELECT name, COUNT(*) FROM \"Searches\" GROUP BY name ORDER BY count DESC LIMIT 10';\n      if (typeof offset === 'number') {\n        psqlQuery += 'OFFSET ' + offset;\n      } else {\n        offset = 0;\n      }\n      const results = await sequelize.query(psqlQuery, {\n        type: sequelize.QueryTypes.SELECT,\n        offset: offset,\n      });\n\n      // map array to promises\n      const promises = await results.map(async (result, i) => {\n        const pokemon = await Pokemon.findOne({\n          where: { name: result.name },\n          attributes: attributes,\n        });\n        const pokemonData = pokemon.dataValues;\n        pokemonData.count = result.count;\n        pokemonData.rank = i + 1 + offset;\n        pokemonData.subtitle = result.count + ' searches';\n        return pokemonData;\n      });\n      const promisesAll = await Promise.all(promises);\n      const responseObj = {\n        pokemon: promisesAll,\n        offset: offset,\n      };\n\n      res.status(200).json(promisesAll);\n      // res.status(200).json(responseObj);\n    } catch (error) {\n      res.status(404).json({ message: error.message });\n    }\n  });\n\n  api.get('/rank/:sortBy', async (req, res) => {\n    let offset = req.query.offset;\n    if (offset) {\n      offset = parseInt(offset);\n    }\n    if (typeof offset !== 'number') {\n      offset = 0;\n    }\n    let sortResponse = req.query.sort;\n    let param = '';\n    let order = [];\n    let currentStat = '';\n    if (req.params.sortBy) {\n      param = req.params.sortBy.toLowerCase();\n    }\n    switch (param) {\n      case 'height':\n        order.push('height');\n        currentStat = 'height';\n        break;\n      case 'weight':\n        order.push('weight');\n        currentStat = 'weight';\n        break;\n      case 'total':\n        order.push('statTotal');\n        currentStat = 'statTotal';\n        break;\n      case 'hp':\n        order.push('statHp');\n        currentStat = 'statHp';\n        break;\n      case 'attack':\n        order.push('statAttack');\n        currentStat = 'statAttack';\n        break;\n      case 'defense':\n        order.push('statDefense');\n        currentStat = 'statDefense';\n        break;\n      case 'specialattack':\n        order.push('statSpecialAttack');\n        currentStat = 'statSpecialAttack';\n        break;\n      case 'specialdefense':\n        order.push('statSpecialDefense');\n        currentStat = 'statSpecialDefense';\n        break;\n      case 'speed':\n        order.push('statSpeed');\n        currentStat = 'statSpeed';\n        break;\n      case 'popularity':\n        order.push('count');\n        currentStat = 'count';\n        break;\n      default:\n        stat = null;\n    }\n    if (req.query) {\n      if (req.query.sort) {\n        if (req.query.sort === 'highest') {\n          order.push('DESC');\n        }\n      }\n    }\n\n    try {\n      const pokemon = await Pokemon.findAll({\n        order: [order, ['id']],\n        limit: 10,\n        offset: offset,\n        attributes: attributes,\n      });\n      const pokemonRanked = pokemon.map((element, i) => {\n        element.dataValues.rank = i + 1 + offset;\n        if (req.params.sortBy === 'specialdefense') {\n          element.dataValues.subtitle =\n            'Special Defense: ' + element.dataValues[currentStat];\n        } else if (req.params.sortBy === 'specialattack') {\n          element.dataValues.subtitle =\n            'Special Attack: ' + element.dataValues[currentStat];\n        } else if (req.params.sortBy === 'popularity') {\n          element.dataValues.subtitle = element.dataValues.count + ' searches';\n        } else if (req.params.sortBy === 'height') {\n          element.dataValues.subtitle =\n            capitalizeFirstLetter(req.params.sortBy) +\n            ': ' +\n            element.dataValues[currentStat] +\n            'm';\n        } else if (req.params.sortBy === 'weight') {\n          element.dataValues.subtitle =\n            capitalizeFirstLetter(req.params.sortBy) +\n            ': ' +\n            element.dataValues[currentStat] +\n            'kg';\n        } else {\n          element.dataValues.subtitle =\n            capitalizeFirstLetter(req.params.sortBy) +\n            ': ' +\n            element.dataValues[currentStat];\n        }\n\n        return element.dataValues;\n      });\n      const responseObj = {\n        pokemon: pokemonRanked,\n        sortBy: param,\n        sort: sortResponse,\n      };\n      if (offset) {\n        responseObj.offset = offset;\n      } else {\n        responseObj.offset = 0;\n      }\n\n      res.status(200).json(responseObj);\n    } catch (error) {\n      throw error;\n      res.status(404).json({ message: error.message });\n    }\n  });\n\n  api.get('/random/:quantity', async (req, res) => {\n    const idRange = {\n      pokedexNumber: {\n        $between: [1, 802],\n      },\n    };\n    try {\n      if (req.params.quantity == 1) {\n        const randomPokemon = await Pokemon.findOne({\n          where: idRange,\n          order: [[sequelize.literal('random()')]],\n          attributes: attributes,\n        });\n        res.status(200).json(randomPokemon);\n      } else {\n        const randomPokemon = await Pokemon.findAll({\n          where: idRange,\n          order: [[sequelize.literal('random()')]],\n          limit: req.params.quantity,\n          attributes: attributes,\n        });\n        res.status(200).json(randomPokemon);\n      }\n    } catch (error) {\n      res.status(404).json({ message: error.message });\n    }\n  });\n\n  api.get('/types/:name', async (req, res) => {\n    const pokemon = await Pokemon.findOne({ where: { name: req.params.name } });\n    const types = [];\n    types.push(pokemon.type1);\n    if (pokemon.type2) {\n      types.push(pokemon.type2);\n    }\n    console.log(types);\n    const chart = defensiveTypeChart(types);\n    chart.name = req.params.name;\n    res.status(200).json(chart);\n  });\n\n  return api;\n};\n"]}