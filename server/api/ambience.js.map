{"version":3,"sources":["../../src/api/ambience.js"],"names":["config","api","get","req","res","fileName","params","range","headers","file","__dirname","stats","fs","statSync","size","replace","split","start","end","parseInt","writeHead","createReadStream","pipe"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;kBAEe,gBAAgB;AAAA,MAAbA,MAAa,QAAbA,MAAa;;AAC7B,MAAIC,MAAM,sBAAV;;AAEAA,MAAIC,GAAJ,CAAQ,YAAR;AAAA,yFAAsB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACdC,sBADc,GACHF,IAAIG,MAAJ,CAAWD,QADR;AAEdE,mBAFc,GAENJ,IAAIK,OAAJ,CAAYD,KAFN;AAGdE,kBAHc,GAGPC,mCAAgCL,QAAhC,CAHO;AAIdM,mBAJc,GAINC,aAAGC,QAAH,CAAYJ,IAAZ,CAJM;AAKdK,kBALc,GAKPH,MAAMG,IALC;;AAMpB,kBAAIP,KAAJ,EAAW;AAAA,uCACUA,MAAMQ,OAAN,CAAc,QAAd,EAAwB,EAAxB,EAA4BC,KAA5B,CAAkC,GAAlC,CADV,iFACJC,KADI,6BACGC,GADH;;AAETD,wBAAQE,SAASF,KAAT,EAAgB,EAAhB,CAAR;AACAC,sBAAMA,MAAMC,SAASD,GAAT,EAAc,EAAd,CAAN,GAA0BJ,OAAO,CAAvC;AACAV,oBAAIgB,SAAJ,CAAc,GAAd,EAAmB;AACjB,8CAA0BH,KAA1B,SAAmCC,GAAnC,SAA0CJ,IADzB;AAEjB,mCAAiB,OAFA;AAGjB,oCAAkBI,MAAMD,KAAN,GAAc,CAHf;AAIjB,kCAAgB;AAJC,iBAAnB;AAMAL,6BAAGS,gBAAH,CAAoBZ,IAApB,EAA0B,EAAEQ,YAAF,EAASC,QAAT,EAA1B,EAA0CI,IAA1C,CAA+ClB,GAA/C;AACD,eAXD,MAWO;AACLA,oBAAIgB,SAAJ,CAAc,GAAd,EAAmB;AACjB,oCAAkBN,IADD;AAEjB,kCAAgB;AAFC,iBAAnB;AAIAF,6BAAGS,gBAAH,CAAoBZ,IAApB,EAA0Ba,IAA1B,CAA+BlB,GAA/B;AACD;;AAvBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtB;;AAAA;AAAA;AAAA;AAAA;;AA0BA,SAAOH,GAAP;AACD,C","file":"ambience.js","sourcesContent":["import { Router } from 'express';\nimport fs, { createReadStream } from 'fs';\n\nexport default ({ config }) => {\n  let api = Router();\n\n  api.get('/:fileName', async (req, res) => {\n    const fileName = req.params.fileName;\n    const range = req.headers.range;\n    const file = __dirname + `/../assets/audio/${fileName}`;\n    const stats = fs.statSync(file);\n    const size = stats.size;\n    if (range) {\n      let [start, end] = range.replace(/bytes=/, '').split('-');\n      start = parseInt(start, 10);\n      end = end ? parseInt(end, 10) : size - 1;\n      res.writeHead(206, {\n        'Content-Range': `bytes ${start}-${end}/${size}`,\n        'Accept-Ranges': 'bytes',\n        'Content-Length': end - start + 1,\n        'Content-Type': 'audio/mp3',\n      });\n      fs.createReadStream(file, { start, end }).pipe(res);\n    } else {\n      res.writeHead(200, {\n        'Content-Length': size,\n        'Content-Type': 'audio/mp3',\n      });\n      fs.createReadStream(file).pipe(res);\n    }\n  });\n\n  return api;\n};\n"]}