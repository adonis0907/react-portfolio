{"version":3,"sources":["../../src/utils/scrape.js"],"names":["P","Pokedex","Pokemon","require","EvolutionChain","replaceSpaces","string","replace","getSprites","spritesArray","sprites","front_default","push","url","back_default","front_shiny","back_shiny","removeLinebreaks","capitalizeFirstLetter","charAt","toUpperCase","slice","getTypes","typesArray","types","forEach","type","name","getPokemon","id","resource","pokemon","query","getPokemonSpeciesByName","speciesInfo","formattedPokemon","pokedexNumber","abilities","ability1","find","o","slot","ability2","ability3","ability1Resource","ability2Resource","ability3Resource","ability","ability1Description","effect_entries","language","short_effect","ability2Description","ability3Description","species","sprite","length","type1","type2","pokedexEntry","flavor_text_entries","flavor_text","height","weight","statHp","stats","stat","base_stat","statAttack","statDefense","statSpecialAttack","statSpecialDefense","statSpeed","jsonPokemon","jsonSpecies","scrape","counter","checkAndGet","findOne","where","checkIfExists","console","log","chainId","evolution_chain","split","checkIfEvolutionExists","getEvolutionChainById","evolutionChain","create","json","createdAt","Date","updatedAt","whatever","setTimeout","currentPokemon","Math","floor","random","randomPopularityCount","i","rand","update","count"],"mappings":"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AAA;AAAA;AAAA,eAFP;;AAAA,8BAEPL,WAFO;AAAA;AAAA;AAAA;AAgDb;AACA;AACA;AACA;AACA;;;AApDa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAuDA,IAAMuB;AAAA,uFAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBC,aADmB,GACf,CADe;;AAAA;AAAA,kBACZA,IAAI,GADQ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAEJnG,QAAQ4E,OAAR,CAAgB;AACpCC,qBAAO,EAAE3C,eAAeiE,CAAjB;AAD6B,aAAhB,CAFI;;AAAA;AAEpBtE,mBAFoB;AAKpBuE,gBALoB,GAKbL,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,CAA3B,CALa;;AAM1BpE,oBAAQwE,MAAR,CAAe,EAAEC,OAAOF,IAAT,EAAf;;AAN0B;AACHD,eADG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;kBAEe1B,M","file":"scrape.js","sourcesContent":["import Pokedex from 'pokedex-promise-v2';\n\nconst P = new Pokedex();\nconst Pokemon = require('../models').Pokemon;\nconst EvolutionChain = require('../models').EvolutionChain;\n\nconst replaceSpaces = string => {\n  return string.replace(/ /g, '-');\n};\n\nconst getSprites = sprites => {\n  const spritesArray = [];\n  if (sprites.front_default) {\n    spritesArray.push({ url: sprites.front_default });\n  }\n  if (sprites.back_default) {\n    spritesArray.push({ url: sprites.back_default });\n  }\n  if (sprites.front_shiny) {\n    spritesArray.push({ url: sprites.front_shiny });\n  }\n  if (sprites.back_shiny) {\n    spritesArray.push({ url: sprites.back_shiny });\n  }\n  return spritesArray;\n};\n\nconst removeLinebreaks = string => {\n  return string.replace(/\\n/g, ' ');\n};\n\nconst capitalizeFirstLetter = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nconst getTypes = types => {\n  const typesArray = [];\n  types.forEach(type => {\n    typesArray.push(type.type.name);\n  });\n  return typesArray;\n};\n\nconst getPokemon = async id => {\n  try {\n    const pokemon = await P.resource('/api/v2/pokemon/' + id);\n    const query = pokemon.name;\n    const speciesInfo = await P.getPokemonSpeciesByName(id);\n    const formattedPokemon = {};\n    formattedPokemon.name = pokemon.name;\n    formattedPokemon.pokedexNumber = pokemon.id;\n\n    const abilities = pokemon.abilities;\n    const ability1 = abilities.find(o => o.slot === 1);\n    const ability2 = abilities.find(o => o.slot === 2);\n    const ability3 = abilities.find(o => o.slot === 3);\n    let ability1Resource = '';\n    let ability2Resource = '';\n    let ability3Resource = '';\n\n    if (ability1) {\n      ability1Resource = await P.resource(ability1.ability.url);\n      formattedPokemon.ability1Description = removeLinebreaks(\n        ability1Resource.effect_entries.find(o => o.language.name === 'en')\n          .short_effect,\n      );\n      formattedPokemon.ability1 = ability1.ability.name;\n    }\n    if (ability2) {\n      ability2Resource = await P.resource(ability2.ability.url);\n      formattedPokemon.ability2Description = removeLinebreaks(\n        ability2Resource.effect_entries.find(o => o.language.name === 'en')\n          .short_effect,\n      );\n      formattedPokemon.ability2 = ability2.ability.name;\n    }\n    if (ability3) {\n      ability3Resource = await P.resource(ability3.ability.url);\n      formattedPokemon.ability3Description = removeLinebreaks(\n        ability3Resource.effect_entries.find(o => o.language.name === 'en')\n          .short_effect,\n      );\n      formattedPokemon.ability3 = ability3.ability.name;\n    }\n\n    // formattedPokemon.id = pokemon.id;\n    formattedPokemon.species = capitalizeFirstLetter(pokemon.name);\n    if (query === 'meowstic-male' || query === 'meowstic-female') {\n      formattedPokemon.species = 'Meowstic';\n    }\n    formattedPokemon.sprite = pokemon.sprites.front_default;\n    formattedPokemon.sprites = getSprites(pokemon.sprites);\n    if (pokemon.types.length > 1) {\n      formattedPokemon.type1 = pokemon.types[1].type.name;\n      formattedPokemon.type2 = pokemon.types[0].type.name;\n    } else {\n      formattedPokemon.type1 = pokemon.types[0].type.name;\n    }\n    formattedPokemon.pokedexEntry = removeLinebreaks(\n      speciesInfo.flavor_text_entries.find(o => o.language.name === 'en')\n        .flavor_text,\n    );\n    formattedPokemon.height = pokemon.height / 10;\n    formattedPokemon.weight = pokemon.weight / 10;\n    formattedPokemon.statHp = pokemon.stats.find(\n      o => o.stat.name === 'hp',\n    ).base_stat;\n    formattedPokemon.statAttack = pokemon.stats.find(\n      o => o.stat.name === 'attack',\n    ).base_stat;\n    formattedPokemon.statDefense = pokemon.stats.find(\n      o => o.stat.name === 'defense',\n    ).base_stat;\n    formattedPokemon.statSpecialAttack = pokemon.stats.find(\n      o => o.stat.name === 'special-attack',\n    ).base_stat;\n    formattedPokemon.statSpecialDefense = pokemon.stats.find(\n      o => o.stat.name === 'special-defense',\n    ).base_stat;\n    formattedPokemon.statSpeed = pokemon.stats.find(\n      o => o.stat.name === 'speed',\n    ).base_stat;\n    formattedPokemon.jsonPokemon = pokemon;\n    formattedPokemon.jsonSpecies = speciesInfo;\n\n    return formattedPokemon;\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst scrape = async () => {\n  let counter = 1;\n  const checkAndGet = async () => {\n    const checkIfExists = await Pokemon.findOne({\n      where: { pokedexNumber: counter },\n    });\n    if (counter < 808) {\n      if (checkIfExists.pokedexNumber) {\n        console.log(counter + ' exists');\n        const chainId = checkIfExists.jsonSpecies.evolution_chain.url.split(\n          '/',\n        )[6];\n        console.log('chaindId ' + chainId);\n        const checkIfEvolutionExists = await EvolutionChain.findOne({\n          where: { chainId: chainId },\n        });\n        if (checkIfEvolutionExists) {\n          console.log('chain evolution ' + chainId + ' exists');\n          counter++;\n          checkAndGet();\n        } else {\n          const evolutionChain = await P.getEvolutionChainById(chainId);\n          const whatever = await EvolutionChain.create({\n            chainId: evolutionChain.id,\n            json: evolutionChain,\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          });\n          console.log('created chain evolution ' + chainId);\n          setTimeout(() => {\n            counter++;\n            checkAndGet();\n          }, 1000);\n        }\n      } else {\n        console.log('does not exists');\n        setTimeout(async () => {\n          const currentPokemon = await getPokemon(counter);\n          const whatever = await Pokemon.create(currentPokemon);\n          counter++;\n          console.log(counter);\n          checkAndGet();\n        }, 1000 + Math.floor(Math.random * 800));\n      }\n    } else {\n      console.log('completed');\n    }\n  };\n  // checkAndGet();\n  // fixHp();\n  // statTotal();\n  // setEvolutionLine();\n  // randomPopularityCount();\n};\n\nconst randomPopularityCount = async () => {\n  for (var i = 1; i < 810; i++) {\n    const pokemon = await Pokemon.findOne({\n      where: { pokedexNumber: i },\n    });\n    const rand = Math.floor(Math.random() * 5);\n    pokemon.update({ count: rand });\n  }\n};\n\n// const statTotal = async () => {\n//   for (var i = 1; i < 808; i++) {\n//     const pokemon = await Pokemon.findOne({\n//       where: { pokedexNumber: i },\n//     });\n//     // const dataValues = pokemon.dataValues;\n//     // console.log(dataValues.statTotal);\n//     const statTotal =\n//       pokemon.statHp +\n//       pokemon.statAttack +\n//       pokemon.statDefense +\n//       pokemon.statSpecialAttack +\n//       pokemon.statSpecialDefense +\n//       pokemon.statSpeed;\n//     console.log(statTotal);\n//     pokemon.update({\n//       statTotal: statTotal,\n//     });\n//   }\n// };\n\n// const fixHp = async () => {\n//   let counter = 1;\n//   const checkAndFix = async () => {\n//     if (counter < 808) {\n//       const pokemon = await Pokemon.findOne({\n//         where: { pokedexNumber: counter },\n//       });\n//       if (pokemon.statHp !== 0) {\n//         console.log('fixed');\n//         console.log(pokemon.statHp);\n//         counter++;\n//         checkAndFix();\n//       } else {\n//         setTimeout(async () => {\n//           console.log('asjdfkasjdf');\n//           console.log(pokemon.statHp);\n//           const pokemonFromApi = await P.resource('/api/v2/pokemon/' + counter);\n//           const newHp = pokemonFromApi.stats.find(o => o.stat.name === 'hp')\n//             .base_stat;\n//           pokemon.update({ statHp: newHp });\n//           counter++;\n//           checkAndFix();\n//         }, 250);\n//       }\n//     }\n//   };\n//   checkAndFix();\n// };\n\n// const breakHp = async () => {\n//   for (var i = 1; i < 808; i++) {\n//     const pokemon = await Pokemon.findOne({\n//       where: { pokedexNumber: i },\n//     });\n//     pokemon.update({ statHp: 0 });\n//   }\n// };\n\n// const setChainId = async () => {\n//   for (var i = 1; i < 808; i++) {\n//     const pokemon = await Pokemon.findOne({\n//       where: { pokedexNumber: i },\n//     });\n//     if (!pokemon.chainId) {\n//       const chainId = pokemon.jsonSpecies.evolution_chain.url.split('/')[6];\n//       pokemon.update({ chainId: chainId });\n//     }\n//   }\n// };\n\n// const convertToJson = async () => {\n//   for (var i = 255; i < 675; i++) {\n//     const evolutionChain = await EvolutionChain.findOne({\n//       where: { id: i },\n//     });\n//     if (evolutionChain) {\n//       // console.log(evolutionChain.dataValues.json);\n//       evolutionChain.update({ json: JSON.parse(evolutionChain.json) });\n//     }\n//   }\n// };\n\n// const scrapeEvos = async () => {\n//   let counter = 1;\n//   const checkAndGet = async () => {\n\n//     const checkIfExists = await Pokemon.findAll({\n//       where: { chainId: counter },\n//     });\n//     if (counter < 500 && counter) {\n//       if (\n//         checkIfExists.length\n//       ) {\n//         console.log('chain ' + counter + ' exists');\n//         counter++;\n//         checkAndGet();\n//       } else {\n//         console.log('does not exists');\n//         setTimeout(async () => {\n//           const evolutionChain = await P.getEvolutionChainById(counter);\n//           EvolutionChain.create({\n//             chainId: evolutionChain.id,\n//             json: JSON.stringify(evolutionChain),\n//             createdAt: new Date(),\n//             updatedAt: new Date(),\n//           });\n//           counter++;\n//           console.log(counter);\n//           checkAndGet();\n//         }, 500);\n//       }\n//     } else {\n//       console.log('completed');\n//     }\n//   };\n//   checkAndGet();\n// };\n\nexport default scrape;\n"]}